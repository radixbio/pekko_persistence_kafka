def generate_serializers(name, srcs, out = None, inspect = False, **kwargs):
    if inspect:
        cmd = "$(location //shared/persistence:auto-serializers) $(SRCS) $@ | tee $@"
    else:
        cmd = "$(location //shared/persistence:auto-serializers) $(SRCS) $@ > $@"

    if out == None:
        out = name.replace("-", "_") + ".scala"

    native.genrule(
        name = name,
        srcs = srcs,
        outs = [out],
        cmd = cmd,
        tools = [
            "//shared/persistence:auto-serializers",
        ],
        **kwargs
    )

def wrap_location(src):
    return "$(location " + src + ")"

def generate_serializer_bindings(name, srcs, out = "resources/reference.conf", reference = None, inspect = False, **kwargs):
    # If a reference file is included, cat it onto the end of the autogenerated bindings
    if reference != None:
        sources = " ".join([wrap_location(src) for src in srcs])  #"$(location " + ") $(location ".join(srcs) + ")"
        srcs = srcs + [reference]
        inject_resources = "| cat - $(location {other}) ".format(other = reference)
    else:
        sources = "$(SRCS)"
        inject_resources = ""

    if inspect:
        cmd = "$(location //shared/persistence:auto-serializer-bindings) {sources} {inject}| tee $@".format(sources = sources, inject = inject_resources)
    else:
        cmd = "$(location //shared/persistence:auto-serializer-bindings) {sources} {inject}> $@".format(sources = sources, inject = inject_resources)

    native.genrule(
        name = name,
        srcs = srcs,
        outs = [out],
        cmd = cmd,
        tools = [
            "//shared/persistence:auto-serializer-bindings",
        ],
        **kwargs
    )
